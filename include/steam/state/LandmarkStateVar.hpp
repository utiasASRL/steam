//////////////////////////////////////////////////////////////////////////////////////////////
/// \file LandmarkStateVar.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_LANDMARK_STATE_VARIABLE_HPP
#define STEAM_LANDMARK_STATE_VARIABLE_HPP

#include <steam/state/StateVariable.hpp>
#include <steam/evaluator/TransformEvaluators.hpp>

namespace steam {
namespace se3 {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Landmark state variable
/////////////////////////////////////////////////////////////////////////////////////////////
class LandmarkStateVar : public StateVariable<Eigen::Vector4d>
{
 public:

  /// Convenience typedefs
  typedef boost::shared_ptr<LandmarkStateVar> Ptr;
  typedef boost::shared_ptr<const LandmarkStateVar> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor from a global 3D point
  //////////////////////////////////////////////////////////////////////////////////////////////
  LandmarkStateVar(const Eigen::Vector3d& v_0);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor from a 3D point with a reference frame
  //////////////////////////////////////////////////////////////////////////////////////////////
  LandmarkStateVar(const Eigen::Vector3d& v_ref, const TransformEvaluator::ConstPtr& refFrame);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Destructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual ~LandmarkStateVar() {}

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Update the landmark state from the 3-dimensional perturbation
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool update(const Eigen::VectorXd& perturbation);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Clone method
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual StateVariableBase::Ptr clone() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Check if a reference frame was set for the landmark.
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool hasReferenceFrame() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Set value -- mostly for landmark initialization
  //////////////////////////////////////////////////////////////////////////////////////////////
  void set(const Eigen::Vector3d& v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the reference frame transform evaluator
  //////////////////////////////////////////////////////////////////////////////////////////////
  const TransformEvaluator::ConstPtr& getReferenceFrame() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get point transformed into the global (or base) frame.
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::Vector4d getGlobalValue() const;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Homogeneously scale point from raw xyz point
  //////////////////////////////////////////////////////////////////////////////////////////////
  void setHomogeneous(const Eigen::Vector3d& v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief (optional) Reference frame for the landmark
  //////////////////////////////////////////////////////////////////////////////////////////////
  TransformEvaluator::ConstPtr refFrame_;

};

} // se3
} // steam

#endif // STEAM_LANDMARK_STATE_VARIABLE_HPP
