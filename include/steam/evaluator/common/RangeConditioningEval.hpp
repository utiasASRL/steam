//////////////////////////////////////////////////////////////////////////////////////////////
/// \file RangeConditioningEval.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_RANGE_CONDITIONING_EVALUATOR_HPP
#define STEAM_RANGE_CONDITIONING_EVALUATOR_HPP

#include <steam/evaluator/ErrorEvaluator.hpp>

#include <steam/state/LandmarkStateVar.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief
//////////////////////////////////////////////////////////////////////////////////////////////
class RangeConditioningEval : public ErrorEvaluator<1,3>::type
{
public:

  /// Convenience typedefs
  typedef boost::shared_ptr<RangeConditioningEval> Ptr;
  typedef boost::shared_ptr<const RangeConditioningEval> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  RangeConditioningEval(const se3::LandmarkStateVar::ConstPtr& landmark);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double,1,1> evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double,1,1> evaluate(const Eigen::Matrix<double,1,1>& lhs, std::vector<Jacobian<1,3> >* jacs) const;

private:

  Eigen::Matrix<double,1,1> meas_;

  se3::LandmarkStateVar::ConstPtr landmark_;

};

} // steam

#endif // STEAM_RANGE_CONDITIONING_EVALUATOR_HPP
