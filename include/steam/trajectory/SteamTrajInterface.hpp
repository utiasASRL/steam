//////////////////////////////////////////////////////////////////////////////////////////////
/// \file SteamTrajInterface.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_TRAJECTORY_INTERFACE_HPP
#define STEAM_TRAJECTORY_INTERFACE_HPP


#include <steam/trajectory/SteamTrajVar.hpp>
#include <steam/trajectory/SteamTrajInterfaceTemplate.hpp>

namespace steam {
namespace se3 {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief The trajectory class wraps a set of state variables to provide an interface
///        that allows for continuous-time pose interpolation.
//////////////////////////////////////////////////////////////////////////////////////////////
class SteamTrajInterface : public SteamTrajInterfaceTemplate<SteamTrajVar>
{
 public:

  using SteamTrajInterfaceTemplate<SteamTrajVar>::SteamTrajInterfaceTemplate;
  using SteamTrajInterfaceTemplate<SteamTrajVar>::add;

  ////////////////////////////////////////////////////////////////////////////////////////////
  // \brief Add a new knot
  //////////////////////////////////////////////////////////////////////////////////////////
  void add(const steam::Time& time, const se3::TransformEvaluator::Ptr& T_k0,
           const VectorSpaceStateVar::Ptr& velocity) override;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get transform evaluator
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual TransformEvaluator::ConstPtr getInterpPoseEval(const steam::Time& time) const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get velocity evaluator
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd getVelocity(const steam::Time& time);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get binary cost terms associated with the prior for active parts of the trajectory
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual void appendPriorCostTerms(const ParallelizedCostTermCollection::Ptr& costTerms) const;

};

} // se3
} // steam

#endif // STEAM_TRAJECTORY_INTERFACE_HPP
